@using System.Security.Claims;
@using BookResale.Web.Shared.Providers;
@inject ILocalStorageService _localStorageService;
@inject ISyncLocalStorageService _syncLocalStorageService;
@inject NavigationManager _navigationManager;
@inject AuthenticationStateProvider _authStateProvider;
@inject ICartService cartService;
@inject IToastService _toastService;
@inject IUserService userService;
@inherits HeaderBase;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject IJSRuntime JSRuntime;

<header>
    <div class="static-header ach-container">
        <a href="/" class="second-page-logo-container">
            <img src="/Images/Logo/SecondPageLogo-01.svg" alt="logo" class="second-page-logo" />
        </a>
        <div class="search-bar">
            <input type="text" name="search" id="search-bar" placeholder="Search" @bind="@searchQuery" @bind:event="oninput" @onkeyup="async () => await searchBook()" @ref="searchInput" @onkeydown="SearchKeyPress"/>
            <div class="search-icon-container" @onclick="async () => await SearchResult()">
                <i class="bi bi-search"></i>
            </div>
            @if(searchResult != null)
            {
                @if(searchResult.Count() > 0)
                {
                    @if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <div class="search-list">
                        @foreach (var book in searchResult)
                        {
                            <div class="list-item" @onclick="() => displayBookDetails(book.Id)">
                                <img src="@book.ImageURL">
                                <div>
                                    <h6>@book.Title</h6>
                                    <span>@book.AuthorFirstName @book.AuthorLastName</span>
                                </div>
                            </div>
                        }
                        </div>
                    }
                }
                
            }
        </div>
        <div class="sign-in-add-to-cart-container">
            <AuthorizeView>
                <Authorized>
                    <span class="name">@userName</span>
                    <ul class="tgl-list">
                        <li><a href="/Profile">profil</a></li>
                        <li @onclick="Logout">logout</li>
                    </ul>
                </Authorized>
                <NotAuthorized>
                    <a href="/SignIn" class="sign-in">sign in</a>
                </NotAuthorized>
            </AuthorizeView>
            <AuthorizeView>
                <Authorized>
                    <span class="separator"></span>
                    <a href="/Cart" class="cart-container">
                        <span class="cart-text">cart</span>
                        <i class="bi bi-cart cart-icon">
                            <span class="books-count">@GetBooksCount()</span>
                        </i>
                    </a>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
    <div class="dynamic-header ach-container">
        <ul class="nav-menu">
            <li><a href="/">books</a></li>
            <li class="after-arrow"><a href="">categories</a></li>
            @if(categories != null && categories.Count() > 0)
            {
                <li style="position: absolute;" class="categories_list">
                    <ul>
                        @foreach (var category in categories)
                        {
                            <li @onclick="() => navigateToGenreBooks(category)">@category.CategoryName</li>
                        }
                    </ul>
                </li>
            }
            <AuthorizeView>
                <Authorized>
                    @if (SellerAuth(context.User.Claims.ToList()))
                    {
                        <li><a href="/Inventory">inventory</a></li>
                    }
                </Authorized>
            </AuthorizeView>
            <li><a href="#">help</a></li>
        </ul>
        <AuthorizeView>
            <Authorized>
                <div @onclick="NavigateToInbox">
                    <i class="bi bi-bell-fill"></i>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
</header>

@code {
    private bool IsUserLoggedIn { get; set; }
    private int userId { get; set; }
    private UserDto userDto { get; set; }
    private string? userName { get; set; }
    private ElementReference searchInput;

    private void displayBookDetails(long bookId)
    {
        _navigationManager.NavigateTo($"/BookDetails/{bookId}");
        JSRuntime.InvokeVoidAsync("focusElement", searchInput);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsUserLoggedIn = user.Identity?.IsAuthenticated ?? false;
        if (IsUserLoggedIn)
        {
            var claims = user.Claims;
            var user_id = int.Parse(claims.Where(_ => _.Type == "Sub").Select(_ => _.Value).FirstOrDefault());
            if (user_id != 0)
            {
                userId = user_id;
                userDto = await userService.GetUser(userId);
                var username = userDto.FirstName + " " + userDto.LastName;
                userName = username;
            }
        }
    }


    private bool SellerAuth(List<Claim> claims)
    {
        var Role = int.Parse(claims.Where(_ => _.Type == "Role").Select(_ => _.Value).FirstOrDefault());
        if (Role != 0 && Role == 2)
        {
            return true;
        }
        return false;
    }

    private async Task Logout()
    {
        await _localStorageService.RemoveItemAsync("jwt-access-token");
        (_authStateProvider as CustomAuthProvider).NotifyAuthState();
        _toastService.ShowSuccess("Logged-out.");
        _navigationManager.NavigateTo("/", forceLoad: true);
    }

    private int GetBooksCount()
    {
        var cart = _syncLocalStorageService.GetItem<List<BookDto>>("cart");
        return cart != null ? cart.Count : 0;

    }

    private void NavigateToInbox()
    {
        _navigationManager.NavigateTo("/Inbox");
    }

    protected override void OnInitialized()
    {
        cartService.OnChange += StateHasChanged;
    }

    private void Dispose()
    {
        cartService.OnChange -= StateHasChanged;
    }

    bool isListVisible = false;

    /*private void ToggleList()
    {
        isListVisible = !isListVisible;
    }*/
}