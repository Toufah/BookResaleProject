@page "/SignIn"
@using System.Text.Json;
@using System.Text;
@using System.Net;
@using BookResale.Web.Shared.Providers;
@inject HttpClient _http;
@inject NavigationManager _navigationManager;
@inject ILocalStorageService _localStorageService;
@inject AuthenticationStateProvider _authStateProvider;
@inject IToastService _toastService;

<div class="ach-container form-cont">
    <div>
        <div class="sign-in-cont">
            <h3 class="dt-ct-title form-title" style="cursor: default;">sign in</h3>
            <MudCard>
                <MudForm Model="loginModel" @ref="form_login" Validation="loginValidatorModel.ValidateValues">
                    <MudCardContent>
                        <MudTextField @bind-Value="loginModel.Email"
                                      For="@(() => loginModel.Email)"
                                      Immediate="true"
                                      Label="email" />
                        <MudTextField @bind-Value="loginModel.Password"
                                      For="@(() => loginModel.Password)"
                                      Immediate="true"
                                      Label="password" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions Class="btn-cont">
                        <MudButton Variant="Variant.Filled" Class="cust-btn" OnClick="LoginAsync">sign in</MudButton>
                    </MudCardActions>
                </MudForm>
            </MudCard>
        </div>
        <div class="register-cont">
            <h3 class="dt-ct-title form-title" style="cursor: default;">register</h3>
            <MudCard>
                <MudForm Model="RegistratioModel" @ref="form" Validation="validationModel.ValidateValue">
                    <MudCardContent>
                        <MudTextField @bind-Value="RegistratioModel.FirstName"
                                      For="@(() => RegistratioModel.FirstName)"
                                      Immediate="true"
                                      Label="firstname" />
                        <MudTextField @bind-Value="RegistratioModel.LastName"
                                      For="@(() => RegistratioModel.LastName)"
                                      Immediate="true"
                                      Label="lastname" />
                        <MudTextField @bind-Value="RegistratioModel.Email"
                                      For="@(() => RegistratioModel.Email)"
                                      Immediate="true"
                                      Label="email" />
                        <MudTextField @bind-Value="RegistratioModel.Password"
                                      For="@(() => RegistratioModel.Password)"
                                      Immediate="true"
                                      Label="password" InputType="InputType.Password" />
                        <MudTextField @bind-Value="RegistratioModel.ConfirmPassword"
                                      For="@(() => RegistratioModel.ConfirmPassword)"
                                      Immediate="true"
                                      Label="confirm password" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions Class="btn-cont">
                        <MudButton Variant="Variant.Filled" Class="cust-btn" OnClick="RegisterAsync">register</MudButton>
                    </MudCardActions>
                </MudForm>
            </MudCard>
        </div>
    </div>
</div>


@code {
    //Registration
    RegistrationVM RegistratioModel = new RegistrationVM();

    SignInVM SignInModel = new SignInVM();



    ResgistrationValidationVM validationModel;

    MudForm form;

    string APIErrorMessages;

    protected override Task OnInitializedAsync()
    {
        validationModel = new ResgistrationValidationVM(_http);
        return base.OnInitializedAsync();
    }

    protected async Task RegisterAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(RegistratioModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await _http.PostAsync("api/User/register", requestContent);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            _toastService.ShowError($"{errorMessage}.");
                        }
                    }
                }
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {
                _navigationManager.NavigateTo("/SignIn");
                _toastService.ShowSuccess("Registred.You can login now.");
            }
            else
            {
                _toastService.ShowError($"Failed to register.");
            }
        }
    }

    //Sign In
    LoginVM loginModel = new LoginVM();

    MudForm form_login;
    string APIErrorMessagesLogin;

    LoginValidationVM loginValidatorModel = new LoginValidationVM();

    private async Task LoginAsync()
    {
        await form_login.Validate();
        if (form_login.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await _http.PostAsync("api/User/login", requestContent);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            _toastService.ShowError($"{errorMessage}.");
                        }
                    }
                }
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {
                _navigationManager.NavigateTo("/");
                var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponseVm>();
                await _localStorageService.SetItemAsync<string>("jwt-access-token", tokenResponse.AccessToken);
                (_authStateProvider as CustomAuthProvider).NotifyAuthState();
                _toastService.ShowSuccess("logged-In.");
            }
            else
            {
                _toastService.ShowError("Failed to login.");
            }
        }
    }
}