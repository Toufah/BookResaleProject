@page "/SignIn"
@using System.Text.Json;
@using System.Text;
@using System.Net;
@inject HttpClient _http
@inject NavigationManager _navigationManager

<div class="ach-container form-cont">
    @if (!string.IsNullOrEmpty(APIErrorMessages))
    {
        <p class="txt-dgr">@APIErrorMessages</p>
    }
    <div>
        <div class="sign-in-cont">
            <h3 class="dt-ct-title form-title" style="cursor: default;">sign in</h3>
            <MudCard>
                <MudForm Model="SignInModel">
                    <MudCardContent>
                        <MudTextField @bind-Value="SignInModel.Email"
                                      For="@(() => SignInModel.Email)"
                                      Immediate="true"
                                      Label="email" />
                        <MudTextField @bind-Value="SignInModel.Password"
                                      For="@(() => SignInModel.Password)"
                                      Immediate="true"
                                      Label="password" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions Class="btn-cont">
                        <MudButton Variant="Variant.Filled" Class="cust-btn" OnClick="@(async () => await RegisterAsync())">sign in</MudButton>
                    </MudCardActions>
                </MudForm>
            </MudCard>
        </div>
        <div class="register-cont">
            <h3 class="dt-ct-title form-title" style="cursor: default;">register</h3>
            <MudCard>
                <MudForm Model="RegistratioModel" @ref="form" Validation="validationModel.ValidateValue">
                    <MudCardContent>
                        <MudTextField @bind-Value="RegistratioModel.FirstName"
                                      For="@(() => RegistratioModel.FirstName)"
                                      Immediate="true"
                                      Label="firstname" />
                        <MudTextField @bind-Value="RegistratioModel.LastName"
                                      For="@(() => RegistratioModel.LastName)"
                                      Immediate="true"
                                      Label="lastname" />
                        <MudTextField @bind-Value="RegistratioModel.Email"
                                      For="@(() => RegistratioModel.Email)"
                                      Immediate="true"
                                      Label="email" />
                        <MudTextField @bind-Value="RegistratioModel.Password"
                                      For="@(() => RegistratioModel.Password)"
                                      Immediate="true"
                                      Label="password" InputType="InputType.Password" />
                        <MudTextField @bind-Value="RegistratioModel.ConfirmPassword"
                                      For="@(() => RegistratioModel.ConfirmPassword)"
                                      Immediate="true"
                                      Label="confirm password" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions Class="btn-cont">
                            <MudButton Variant="Variant.Filled" Class="cust-btn" OnClick="@(async () => await RegisterAsync())">register</MudButton>
                    </MudCardActions>
                </MudForm>
            </MudCard>
        </div>
    </div>
</div>


@code {
    RegistrationVM RegistratioModel = new RegistrationVM();
    SignInVM SignInModel = new SignInVM();

    ResgistrationValidationVM validationModel;

    MudForm form;

    string APIErrorMessages;

    protected override Task OnInitializedAsync()
    {
        validationModel = new ResgistrationValidationVM(_http);
        return base.OnInitializedAsync();
    }

    protected async Task RegisterAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(RegistratioModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await _http.PostAsync("api/User/register", requestContent);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            APIErrorMessages = $"{APIErrorMessages} {errorMessage}";
                        }
                    }
                }
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {
                _navigationManager.NavigateTo("/SignIn");
            }
            else
            {
                APIErrorMessages = "Failed to register user.";
            }
        }
    }
}