// <auto-generated />
using BookResale.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookResale.Api.Migrations
{
    [DbContext(typeof(BookResaleDbContext))]
    partial class BookResaleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookResale.Api.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Birthplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Born")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Died")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthplace = "America",
                            Born = "March 9, 1984",
                            Died = "",
                            FirstName = "Mark",
                            ImageURL = "/Images/Beauty/MarkManson.png",
                            LastName = "Manson"
                        },
                        new
                        {
                            Id = 2,
                            Birthplace = "Hilo, Hawaii, U.S",
                            Born = "April 8, 1947",
                            Died = "",
                            FirstName = "Robert",
                            ImageURL = "/Images/Beauty/Robert.png",
                            LastName = "Kiyosaki"
                        },
                        new
                        {
                            Id = 3,
                            Birthplace = "America",
                            Born = "November 7, 1874",
                            Died = "April 5, 1957",
                            FirstName = "George",
                            ImageURL = "/Images/Beauty/SamuelClason.png",
                            LastName = "Samuel Clason"
                        });
                });

            modelBuilder.Entity("BookResale.Api.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1214689745812L,
                            AuthorId = 1,
                            CategoryId = 1,
                            Description = "A self-help book written by Mark Manson. The book challenges traditional self-help advice by arguing that the key to a fulfilling life is not to try to be happy all the time, but to embrace the inevitable struggles and failures that come with life.",
                            ImageURL = "/Images/Beauty/theSubtleArtOfNotGivingAF*ck.png",
                            Price = 100m,
                            Qty = 12,
                            StateId = 1,
                            Title = "The subtle art of not giving a f*ck"
                        },
                        new
                        {
                            Id = 5687421938751L,
                            AuthorId = 2,
                            CategoryId = 0,
                            Description = "A personal finance book written by Robert Kiyosaki. The book is structured as a series of lessons that Kiyosaki learned from his RICH DAD and his POOR DAD, who had contrasting attitudes towards money and wealth.",
                            ImageURL = "/Images/Beauty/RichDadPoorDad.png",
                            Price = 80m,
                            Qty = 10,
                            StateId = 0,
                            Title = "Rich dad poor dad"
                        },
                        new
                        {
                            Id = 5687421875751L,
                            AuthorId = 1,
                            CategoryId = 2,
                            Description = "A classic personal finance book written by   . The book uses parables set in ancient Babylon to teach timeless lessons about money management and wealth creation.",
                            ImageURL = "/Images/Beauty/TheRichestManInBabylon.png",
                            Price = 120m,
                            Qty = 8,
                            StateId = 0,
                            Title = "The Richest Man in Babylon"
                        });
                });

            modelBuilder.Entity("BookResale.Api.Entities.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "self-help"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "history "
                        });
                });

            modelBuilder.Entity("BookResale.Api.Entities.BookState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            State = "New"
                        },
                        new
                        {
                            Id = 2,
                            State = "Second-hand"
                        },
                        new
                        {
                            Id = 3,
                            State = "Old"
                        });
                });

            modelBuilder.Entity("BookResale.Api.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BookResale.Api.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BookResale.Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CID = "W452876",
                            Email = "bob@gmail.com",
                            FirstName = "Bob",
                            LastName = "jackson",
                            Password = "Bob2001@",
                            Phone = "0666603548",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            CID = "W852876",
                            Email = "sarah@gmail.com",
                            FirstName = "sarah",
                            LastName = "hasner",
                            Password = "sarah2001@",
                            Phone = "0766603548",
                            Role = 1
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
